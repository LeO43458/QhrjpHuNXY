// 代码生成时间: 2025-09-24 10:57:10
package com.example.filebackup;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

@SpringBootApplication
@EnableJpaRepositories("com.example.filebackup.repository")
public class FileBackupApplication {
    public static void main(String[] args) {
        SpringApplication.run(FileBackupApplication.class, args);
    }
}
file_backup_springboot_app/src/main/java/com/example/filebackup/dto/BackupRequest.java
package com.example.filebackup.dto;

public class BackupRequest {
    private String sourcePath;
    private String targetPath;
    // Getters and Setters
    public String getSourcePath() {
        return sourcePath;
    }
    public void setSourcePath(String sourcePath) {
        this.sourcePath = sourcePath;
    }
    public String getTargetPath() {
        return targetPath;
    }
    public void setTargetPath(String targetPath) {
        this.targetPath = targetPath;
    }
}
file_backup_springboot_app/src/main/java/com/example/filebackup/exception/FileBackupException.java
package com.example.filebackup.exception;

public class FileBackupException extends RuntimeException {
    public FileBackupException(String message) {
        super(message);
    }
}
file_backup_springboot_app/src/main/java/com/example/filebackup/service/FileBackupService.java
package com.example.filebackup.service;

import com.example.filebackup.dto.BackupRequest;
import com.example.filebackup.exception.FileBackupException;
import org.springframework.stereotype.Service;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

@Service
public class FileBackupService {
    public void backupFiles(BackupRequest request) {
        try {
            Path sourcePath = Paths.get(request.getSourcePath());
            Path targetPath = Paths.get(request.getTargetPath());
            if (!Files.exists(sourcePath)) {
                throw new FileBackupException("Source path does not exist");
            }
            Files.copy(sourcePath, targetPath);
        } catch (IOException e) {
            throw new FileBackupException("Failed to backup files", e);
        }
    }
}
file_backup_springboot_app/src/main/java/com/example/filebackup/controller/FileBackupController.java
package com.example.filebackup.controller;

import com.example.filebackup.dto.BackupRequest;
import com.example.filebackup.exception.FileBackupException;
import com.example.filebackup.service.FileBackupService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;
import org.springframework.http.HttpStatus;

@RestController
@RequestMapping("/api/backup")
public class FileBackupController {
    @Autowired
    private FileBackupService fileBackupService;

    @PostMapping("/start")
    public ResponseEntity<String> startBackup(@RequestBody BackupRequest backupRequest) {
        try {
            fileBackupService.backupFiles(backupRequest);
            return ResponseEntity.ok("Backup completed successfully");
        } catch (FileBackupException e) {
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);
        }
    }
}
file_backup_springboot_app/src/main/resources/application.properties
spring.datasource.url=jdbc:mysql://localhost:3306/file_backup
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update
file_backup_springboot_app/src/main/resources/application.yml
server:
  port: 8080
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/file_backup
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
